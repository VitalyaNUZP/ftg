"""
    ____  __  __ _                            __ _   _  _   _           _     _
   / __ \|  \/  (_)_ __   ___  ___ _ __ __ _ / _| |_| || | | |__   __ _| |__ (_) ___  ___
  / / _` | |\/| | | '_ \ / _ \/ __| '__/ _` | |_| __| || |_| '_ \ / _` | '_ \| |/ _ \/ __|
 | | (_| | |  | | | | | |  __/ (__| | | (_| |  _| |_|__   _| |_) | (_| | |_) | |  __/\__ \
  \ \__,_|_|  |_|_|_| |_|\___|\___|_|  \__,_|_|  \__|  |_| |_.__/ \__,_|_.__/|_|\___||___/
   \____/
"""
from .. import loader, utils

def register(cb):
    cb(PosterMod())

@loader.tds
class PosterMod(loader.Module):
    """–î–µ–ª–∞–µ—Ç –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÜD –∫–∞–Ω–∞–ª–∞ –≤ .config(GEEK-TG)"""
    strings = {'cfg_doc': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–¥–ø–∏—Å–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
               "name": "Poster",
               'Working': '<code>[Poster]</code><b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ...</b>',
               'NoReplyOrMedia': '<code>[Poster]</code><b>–ù—É–∂–µ–Ω —Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ–¥–∏–∞.</b>',
               'Error': '<code>[Poster]</code><b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.(–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∏ —Å–∞–º –∫–∞–Ω–∞–ª)</b>',
               'NoConfig': '<code>[Poster]</code><b>–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –º–æ–¥—É–ª—è.</b>'}

    def __init__(self):
        self.name = self.strings['name']

    def __init__(self):
        self.config = loader.ModuleConfig(
            'Channel', '–ù—É–∂–µ–Ω ID –∫–∞–Ω–∞–ª–∞', lambda: '–ö–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–∏–π –∏–¥—ë—Ç –ø–æ—Å—Ç–∏–Ω–≥.')

    @loader.unrestricted
    async def postcmd(self, message):
        """<–ü–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É(–Ω–µ–æ–±—è–∑.)>


        üë®‚ÄçüíªMade by: @Minecraft4babies_GFTG_Modules"""

        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        messages_to_post = []
        caption = []
        files = []

        if reply:
            if reply.media:
                await message.edit(self.strings['Working'])
                try:
                    if reply.grouped_id:
                        for i in range(0,10):
                            checked_message = await message.client.get_messages(message.chat_id, ids=reply.id - i)
                            try:
                                if reply.grouped_id == checked_message.grouped_id:
                                    messages_to_post.insert(0, checked_message)
                            except AttributeError:
                                None
                        for i in range(1,10):
                            checked_message = await message.client.get_messages(message.chat_id, ids=reply.id + i)
                            try:
                                if reply.grouped_id == checked_message.grouped_id:
                                    messages_to_post.append(checked_message)
                            except AttributeError:
                                None
                    else:
                        messages_to_post.append(reply)

                    for i in messages_to_post:
                        files.append(i.media)

                    for i in range(1, len(files)):
                        caption.append('')

                    caption.append(args)

                    await message.client.send_file(int(self.config['Channel']), files, caption=caption)  # –û—Ç–ø—Ä–∞–≤–∫–∞

                    for i in messages_to_post:
                        await i.delete()
                        await message.delete()
                except:
                    if self.config['Channel'] == '–ù—É–∂–µ–Ω ID –∫–∞–Ω–∞–ª–∞':
                        await message.edit(self.strings['NoConfig'])
                    else:
                        await message.edit(self.strings['Error'])
            else:
                await message.edit(self.strings['NoReplyOrMedia'])
        else:
            await message.edit(self.strings['NoReplyOrMedia'])
